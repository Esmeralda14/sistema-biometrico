package Formularios;

import BD.CargarComboBox;
import BD.Conexion;
import java.awt.HeadlessException;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import static com.itextpdf.text.html.HtmlTags.SRC;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import com.sun.javafx.font.FontFactory;

public class VerReporte extends javax.swing.JInternalFrame {

    public int idRol = 0;
    DefaultTableModel modelo = new DefaultTableModel();
    
    public VerReporte() {
        initComponents();
            
        modelo.addColumn("Empleado");
        modelo.addColumn("Puesto");
        modelo.addColumn("Grupo");
        modelo.addColumn("Entrada");
        modelo.addColumn("Salida");
        modelo.addColumn("Retardos");
        modelo.addColumn("Faltas por retardos");
        modelo.addColumn("Asistencias");
        modelo.addColumn("Justificados");
        modelo.addColumn("Total Asistencias");    
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbRegistros = new javax.swing.JTable();
        dcFechaInicial = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        dcFechaFinal = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Ver reporte");

        tbRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Empleado", "Puesto", "Grupo", "Entrada", "Salida", "Retardos", "Faltas por retardos", "Asistencias", "Justificados", "Total Asistencias"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbRegistros);

        jLabel1.setText("Fecha inicial:");

        jLabel2.setText("Fecha final:");

        jButton1.setText("Consultar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnImprimir.setText("Generar PDF");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1283, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(dcFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 701, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dcFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprimir))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cargarDatos();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        Document documento = new Document(PageSize.A4.rotate(), 5f, 5f, 50f, 10f);
        
        int añoI = dcFechaInicial.getCalendar().get(Calendar.YEAR);
        int mesI = dcFechaInicial.getCalendar().get(Calendar.MONTH)+1;
        int diaI = dcFechaInicial.getCalendar().get(Calendar.DAY_OF_MONTH);

        int añoF = dcFechaFinal.getCalendar().get(Calendar.YEAR);
        int mesF = dcFechaFinal.getCalendar().get(Calendar.MONTH)+1;
        int diaF = dcFechaFinal.getCalendar().get(Calendar.DAY_OF_MONTH);

        String fechaInicial = (añoI+"-"+mesI+"-"+diaI);
        String fechaFinal = (añoF+"-"+mesF+"-"+diaF);
        
        String fechaInicialU = (diaI+"-"+mesI+"-"+añoI);
        String fechaFinalU = (diaF+"-"+mesF+"-"+añoF);
        
        String fechaInicialU2 = (diaI+"/"+mesI+"/"+añoI);
        String fechaFinalU2 = (diaF+"/"+mesF+"/"+añoF);
       
        try {
            String ruta = System.getProperty("user.home");
            PdfWriter.getInstance(documento, new FileOutputStream(ruta + "/Desktop/Reporte "+fechaInicialU+" - "+fechaFinalU+".pdf"));
       
            documento.open();
            
            Paragraph parrafo = new Paragraph("                         Reporte de asistencia del "+fechaInicialU2+" al "+fechaFinalU2+"\n\n");
            documento.add(parrafo);
            
            PdfPTable tabla = new PdfPTable(10);
            
            Paragraph columna = new Paragraph("Empleado");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
                        
            columna = new Paragraph("Puesto");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
            
            columna = new Paragraph("Grupo");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
            
            columna = new Paragraph("Entrada");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
            
            columna = new Paragraph("Salida");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
            
            columna = new Paragraph("Retardos");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
            
            columna = new Paragraph("Faltas por retardos");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
            
            columna = new Paragraph("Asistencias");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
            
            columna = new Paragraph("Justificado");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
            
            columna = new Paragraph("Total Asistencias");
            columna.getFont().setSize(11);
            tabla.addCell(columna);
            
            try {    
                PreparedStatement ps = null;
                ResultSet rs = null;
                Conexion c = new Conexion();
                java.sql.Connection con = c.getConexion();

                String sql = "" +
                "SELECT " +
                "CONCAT(e.nombres,' ',e.apellidos) as nombre " +
                ",p.puesto " +
                ",g.grupo " +
                ",e.horaEntrada " +
                ",e.horaSalida " +
                ",(select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and r.idEstatus = 2 and fecha between ? and ?) AS retardos " +
                ",FLOOR((select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and r.idEstatus = 2 and fecha between ? and ?)/3)  AS faltaPorRetardos" +
                ",(select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and r.idEstatus = 1 and fecha between ? and ?) AS asistencias" +
                ",(select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and (r.idEstatus = 4 or r.idEstatus = 5 or r.idEstatus = 6 or r.idEstatus = 7) and fecha between ? and ?) AsistenciasPorJustificacion" +
                ",(select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and (r.idEstatus = 1 or r.idEstatus = 2 or r.idEstatus = 4 or r.idEstatus = 5 or r.idEstatus = 6 or r.idEstatus = 7)and fecha between ? and ?) " +
                " - FLOOR((select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and r.idEstatus = 2 and fecha between ? and ?)/3) " +
                " AS TotalAsistencias " +
                " FROM tb_empleados e " +
                " INNER JOIN tb_puestos p " +
                "   on p.id = e.idPuesto " +
                " INNER JOIN tb_grupos g " +
                "	on g.id = e.idGrupo";

                ps = con.prepareStatement(sql);
                ps.setString(1, fechaInicial);
                ps.setString(2, fechaFinal);
                ps.setString(3, fechaInicial);
                ps.setString(4, fechaFinal);
                ps.setString(5, fechaInicial);
                ps.setString(6, fechaFinal);
                ps.setString(7, fechaInicial);
                ps.setString(8, fechaFinal);
                ps.setString(9, fechaInicial);
                ps.setString(10, fechaFinal);
                ps.setString(11, fechaInicial);
                ps.setString(12, fechaFinal);

                rs = ps.executeQuery();
                
                if(rs.next()){               
                    do {                        
                        columna = new Paragraph(rs.getString(1));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
        
                        columna = new Paragraph(rs.getString(2));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
                        
                        columna = new Paragraph(rs.getString(3));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
                        
                        columna = new Paragraph(rs.getString(4));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
                        
                        columna = new Paragraph(rs.getString(5));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
                        
                        columna = new Paragraph(rs.getString(6));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
                        
                        columna = new Paragraph(rs.getString(7));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
                        
                        columna = new Paragraph(rs.getString(8));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
                        
                        columna = new Paragraph(rs.getString(9));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
                        
                        columna = new Paragraph(rs.getString(10));
                        columna.getFont().setSize(10);
                        tabla.addCell(columna);
                    } while (rs.next());
                    documento.add(tabla);    
                    
                }
                
            } catch (DocumentException | SQLException e) {
            }
            documento.close();
            JOptionPane.showMessageDialog(null, "Reporte creado en el escritorio.");
        } catch (DocumentException | HeadlessException | FileNotFoundException e) {
        }


//        try{
//            Document document = new Document();
//            String ruta = System.getProperty("user.home");
//            PdfWriter.getInstance(document, new FileOutputStream(ruta + "/Desktop/Reporte.pdf"));
//            document.setPageSize(PageSize.A4.rotate());
//            //PdfWriter.getInstance(document, new FileOutputStream(dest));
//            document.open();
//            PdfPTable table = new PdfPTable(3);
//            PdfPCell cell = new PdfPCell(new Phrase("Cell with colspan 3"));
//            cell.setColspan(3);
//            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
//            table.addCell(cell);
//            cell = new PdfPCell(new Phrase("Cell with rowspan 2"));
//            cell.setRowspan(2);
//            cell.setVerticalAlignment(Element.ALIGN_MIDDLE);
//            table.addCell(cell);
//            table.addCell("Cell 1.1");
//            cell = new PdfPCell();
//            cell.addElement(new Phrase("Cell 1.2"));
//            table.addCell(cell);
//            cell = new PdfPCell(new Phrase("Cell 2.1"));
//            cell.setPadding(5);
//            cell.setUseAscender(true);
//            cell.setUseDescender(true);
//            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
//            table.addCell(cell);
//            cell = new PdfPCell();
//            cell.setPadding(5);
//            cell.setUseAscender(true);
//            cell.setUseDescender(true);
//            Paragraph p = new Paragraph("Cell 2.2");
//            p.setAlignment(Element.ALIGN_CENTER);
//            cell.addElement(p);
//            table.addCell(cell);
//            document.add(table);
//            document.close();
//            JOptionPane.showMessageDialog(null, "Reporte creado.");
//            } catch (DocumentException | HeadlessException | FileNotFoundException e) {
//                System.out.println(e.getMessage());
//            }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void limpiar(){
        int xfilasx=tbRegistros.getRowCount();
        for (int i = xfilasx-1;i>=0; i--) {
            modelo.removeRow(i);
        }
    }
    
    private void cargarDatos(){
        try{
            tbRegistros.setModel(modelo);
            
            limpiar();
            
            int añoI = dcFechaInicial.getCalendar().get(Calendar.YEAR);
            int mesI = dcFechaInicial.getCalendar().get(Calendar.MONTH)+1;
            int diaI = dcFechaInicial.getCalendar().get(Calendar.DAY_OF_MONTH);
            
            int añoF = dcFechaFinal.getCalendar().get(Calendar.YEAR);
            int mesF = dcFechaFinal.getCalendar().get(Calendar.MONTH)+1;
            int diaF = dcFechaFinal.getCalendar().get(Calendar.DAY_OF_MONTH);
            
            String fechaInicial = (añoI+"-"+mesI+"-"+diaI);
            String fechaFinal = (añoF+"-"+mesF+"-"+diaF);
            
            PreparedStatement ps = null;
            ResultSet rs = null;
            Conexion c = new Conexion();
            java.sql.Connection con = c.getConexion();

            String sql = "" +
            "SELECT " +
            "CONCAT(e.nombres,' ',e.apellidos) as nombre " +
            ",p.puesto " +
            ",g.grupo " +
            ",e.horaEntrada " +
            ",e.horaSalida " +
            ",(select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and r.idEstatus = 2 and fecha between ? and ?) AS retardos " +
            ",FLOOR((select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and r.idEstatus = 2 and fecha between ? and ?)/3)  AS faltaPorRetardos" +
            ",(select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and r.idEstatus = 1 and fecha between ? and ?) AS asistencias" +
            ",(select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and (r.idEstatus = 4 or r.idEstatus = 5 or r.idEstatus = 6 or r.idEstatus = 7) and fecha between ? and ?) AsistenciasPorJustificacion" +
            ",(select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and (r.idEstatus = 1 or r.idEstatus = 2 or r.idEstatus = 4 or r.idEstatus = 5 or r.idEstatus = 6 or r.idEstatus = 7)and fecha between ? and ?) " +
            " - FLOOR((select COUNT(*) from tb_reportes r where r.idEmpleado = e.id and r.idEstatus = 2 and fecha between ? and ?)/3) " +
            " AS TotalAsistencias " +
            " FROM tb_empleados e " +
            " INNER JOIN tb_puestos p " +
            "   on p.id = e.idPuesto " +
            " INNER JOIN tb_grupos g " +
            "	on g.id = e.idGrupo";
                
            ps = con.prepareStatement(sql);
            ps.setString(1, fechaInicial);
            ps.setString(2, fechaFinal);
            ps.setString(3, fechaInicial);
            ps.setString(4, fechaFinal);
            ps.setString(5, fechaInicial);
            ps.setString(6, fechaFinal);
            ps.setString(7, fechaInicial);
            ps.setString(8, fechaFinal);
            ps.setString(9, fechaInicial);
            ps.setString(10, fechaFinal);
            ps.setString(11, fechaInicial);
            ps.setString(12, fechaFinal);
            
            rs = ps.executeQuery();

            ResultSetMetaData rsMd = (ResultSetMetaData) rs.getMetaData();
            int cantidadColumnas = rsMd.getColumnCount();

            
            int numFilas = 0;
            while (rs.next()) {
                numFilas++;
                Object[] filas = new Object[cantidadColumnas];
                for (int i = 0; i < cantidadColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modelo.addRow(filas);
            }
             int[] anchos = {
                        /*Empleado*/130, 
                        /*Puesto*/50, 
                        /*Grupo*/50, 
                        /*Entrada*/20, 
                        /*Salida*/20,
                        /*Retardos*/50,
                        /*Faltas por retardos*/50,
                        /*Asistencias*/20,
                        /*Justificados*/20,
                        /*Total Asistencias*/50
        };
        for (int i = 0; i < tbRegistros.getColumnCount(); i++) {
            tbRegistros.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
            if(numFilas == 0){
                JOptionPane.showMessageDialog(null, "No hay registros del día seleccionado.");
            }
            
        } catch(Exception ex){
            System.out.println(ex.getMessage());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private com.toedter.calendar.JDateChooser dcFechaFinal;
    private com.toedter.calendar.JDateChooser dcFechaInicial;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbRegistros;
    // End of variables declaration//GEN-END:variables

}