package Formularios;

import BD.Conexion;
import static Formularios.CapturaHuella.TEMPLATE_PROPERTY;
import clock.RelogApplet;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import static com.digitalpersona.onetouch.processing.DPFPTemplateStatus.TEMPLATE_STATUS_FAILED;
import static com.digitalpersona.onetouch.processing.DPFPTemplateStatus.TEMPLATE_STATUS_READY;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import java.applet.AudioClip;

import java.awt.Frame;
import java.awt.Image;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;


public final class ChecadorHuella extends javax.swing.JFrame implements Runnable {
   
    String hora,minutos,segundos,ampm;
    Calendar calendario;
    Thread h1;
    
    public ChecadorHuella() {
        
        initComponents();
        h1 = new Thread(this);
        h1.start();
        
        this.setLocationRelativeTo(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        
        Date myDate = new Date();
        String fechaActual = new SimpleDateFormat("dd/MM/yyyy").format(myDate);

        //Aqu√≠ obtienes el formato que deseas
        //System.out.println(fechaActual);
        lblFecha.setText(fechaActual);
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblHora = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPuesto = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtHoraEntrada = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtHoraSalida = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtHoraMarcada = new javax.swing.JTextField();
        txtArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        lblFoto = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema checador");

        jPanel1.setBackground(new java.awt.Color(0, 153, 204));

        jLabel1.setFont(new java.awt.Font("Verdana", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Sistema checador");

        lblFecha.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblFecha.setForeground(new java.awt.Color(255, 255, 0));
        lblFecha.setText("DD/MM/AAAA");

        lblHora.setFont(new java.awt.Font("Verdana", 0, 48)); // NOI18N
        lblHora.setForeground(new java.awt.Color(255, 255, 102));
        lblHora.setText("hh:mm");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                .addComponent(lblFecha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHora)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lblFecha))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(lblHora)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setText("Nombre:");

        jLabel5.setText("Puesto:");

        jLabel6.setText("Hora de entrada:");

        jLabel7.setText("Hora de salida:");

        jLabel8.setText("Hora marcada:");

        txtHoraMarcada.setText("- - -");

        txtArea.setEditable(false);
        txtArea.setColumns(20);
        txtArea.setRows(5);
        txtArea.setName("txtArea"); // NOI18N

        lblFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/hueya.png"))); // NOI18N
        jScrollPane1.setViewportView(lblFoto);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre)
                            .addComponent(txtHoraEntrada)
                            .addComponent(txtPuesto)
                            .addComponent(txtHoraSalida)
                            .addComponent(txtHoraMarcada)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(txtArea))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoraEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoraSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoraMarcada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 128, Short.MAX_VALUE)))
                .addComponent(txtArea, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChecadorHuella.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChecadorHuella.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChecadorHuella.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChecadorHuella.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChecadorHuella().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFoto;
    private javax.swing.JLabel lblHora;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtHoraEntrada;
    private javax.swing.JTextField txtHoraMarcada;
    private javax.swing.JTextField txtHoraSalida;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPuesto;
    // End of variables declaration//GEN-END:variables

    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {
        stop();
    } 
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        Iniciar();
        start();
    }
    
    public  void EstadoHuellas(){
        EnviarTexto("Muestra de Huellas Necesarias para Guardar Template "+ Reclutador.getFeaturesNeeded());
    } 
    
    //Varible que permite iniciar el dispositivo de lector de huella conectado
    // con sus distintos metodos.
    private DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();

    //Varible que permite establecer las capturas de la huellas, para determina sus caracteristicas
    // y poder estimar la creacion de un template de la huella para luego poder guardarla
    private DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();

    //Esta variable tambien captura una huella del lector y crea sus caracteristcas para auntetificarla
    // o verificarla con alguna guardada en la BD
    private DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();

    //Variable que para crear el template de la huella luego de que se hallan creado las caracteriticas
    // necesarias de la huella si no ha ocurrido ningun problema
    private DPFPTemplate template;
    
    public void EnviarTexto(String string) {
        txtArea.append(string + "\n");
    } 
    
    protected void Iniciar(){
    
        Lector.addDataListener(new DPFPDataAdapter() {
            @Override public void dataAcquired(final DPFPDataEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("La Huella Digital ha sido Capturada");
                        ProcesarCaptura(e.getSample());
                        try {
                            identificarHuella();
                            Reclutador.clear();
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                });
            }
        });

        Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
            @Override public void readerConnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
                    }
                });
            }

            @Override public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
                    }
                });
            }
        });

        Lector.addSensorListener(new DPFPSensorAdapter() {
            @Override public void fingerTouched(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
                    }
                });
            }

            @Override public void fingerGone(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("El dedo ha sido quitado del Lector de Huella");
                    }
                });
            }
        });

        Lector.addErrorListener(new DPFPErrorAdapter(){
            public void errorReader(final DPFPErrorEvent e){
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        EnviarTexto("Error: "+e.getError());
                    }
                });
            }
        });
    } // fin INICIAR
    
    public DPFPFeatureSet featuresinscripcion;
    public DPFPFeatureSet featuresverificacion;
    
    public DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose){
        DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, purpose);
        }
        catch (DPFPImageQualityException e) {
            return null;
        }
    }
    
    
    
    public void ProcesarCaptura(DPFPSample sample){
        // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de inscripci√≥n.
        featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);

        // Procesar la muestra de la huella y crear un conjunto de caracter√≠sticas con el prop√≥sito de verificacion.
        featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);

        // Comprobar la calidad de la muestra de la huella y lo a√±ade a su reclutador si es bueno
        if (featuresinscripcion != null){
            try{
                //System.out.println("Las Caracteristicas de la Huella han sido creada");
                Reclutador.addFeatures(featuresinscripcion);// Agregar las caracteristicas de la huella a la plantilla a crear

                // Dibuja la huella dactilar capturada.
                Image image=CrearImagenHuella(sample);
                DibujarHuella(image);
            }
            catch (DPFPImageQualityException ex) {
                System.err.println("Error: "+ex.getMessage());
            }

            finally {
                //EstadoHuellas();

                // Comprueba si la plantilla se ha creado.
                switch(Reclutador.getTemplateStatus()){
                    case TEMPLATE_STATUS_READY: // informe de √©xito y detiene  la captura de huellas
                        //EnviarTexto("La Plantilla de la Huella ha Sido Creada, ya puede Verificarla"); 
                                  /////////modifique
                        //stop();
                        setTemplate(Reclutador.getTemplate());
                                 //////////Modifique
                        //EnviarTexto("La Plantilla de la Huella ha Sido Creada, ya puede Verificarla");
                        //btnIdentificar.setEnabled(true);
                        //btnGuardar.setEnabled(true);
                        //btnGuardar.grabFocus();
                    break;

                    case TEMPLATE_STATUS_FAILED: // informe de fallas y reiniciar la captura de huellas
                        Reclutador.clear();
                        stop();
                        //EstadoHuellas();
                        setTemplate(null);
                        JOptionPane.showMessageDialog(ChecadorHuella.this, "La Plantilla de la Huella no pudo ser creada, Repita el Proceso", "Inscripcion de Huellas Dactilares", JOptionPane.ERROR_MESSAGE);
                        start();
                    break;
                }
            }
        }
    } // fin procesarCaptura
    
    public void DibujarHuella(Image image) {
//        lblImagenHuella.setIcon(new ImageIcon(
//        image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
//        repaint();
    } // DibujarHuella
    
    public void start(){
        Lector.startCapture();
        EnviarTexto("Utilizando el Lector de Huella Dactilar ");
    }
    
    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    } // fin setTemplate
    
    public Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    } // fin CrearImagenHuella
    
    public void stop(){
        Lector.stopCapture();
        EnviarTexto("No se est√° usando el Lector de Huella Dactilar ");
    } // fin stop
    
    // ****************************************************************************************************
    // ****************************************************************************************************
    // ****************************************************************************************************
    //es donde hacemos la busquera de la hueya capturada contra la base de datos
    public void identificarHuella() throws IOException{
        AudioClip sonido;
        boolean huellaIdentificada = false;
        int idEmpleado = 0;
        int j;
        Calendar cal = Calendar.getInstance();
        Date fecha= new Date();
        String hora=cal.get(cal.HOUR_OF_DAY)+":"+cal.get(cal.MINUTE)+":"+cal.get(cal.SECOND);
        String horaEntrada = "";
        String horaSalida = "";
//        Date sComida= new Date();
//        sComida.setHours(11);
//            sComida.setMinutes(0);
//            sComida.setSeconds(0);
//        Date eComida = new Date();
//            eComida.setHours(14);
//            eComida.setMinutes(20);
//            eComida.setSeconds(0);
//        Date fechaHoraCero = new Date();
//            fechaHoraCero.setHours(0);
//            fechaHoraCero.setMinutes(0);
//            fechaHoraCero.setSeconds(0);
        try{
            //Establece los valores para la sentencia SQL
            Connection c=Conexion.getConexion();

            //Obtiene todas las huellas de la bd
            PreparedStatement identificarStmt = c.prepareStatement("SELECT "
               + "e.id, "
               + "e.nombres, "
               + "e.apellidos, "
               + "e.idPuesto, "
               + "e.idGrupo, "
               + "e.huella, "
               + "e.foto, "
               + "g.grupo, "
               + "p.puesto, "
               + "e.horaEntrada, "
               + "e.horaSalida "
               + "FROM tb_empleados e "
               + "INNER JOIN tb_grupos g"
               + "	ON e.idGrupo = g.id "
               + "INNER JOIN tb_puestos p"
               + "	ON e.idPuesto=p.id");
            //Obtiene todas las huellas de la bd
            ResultSet rsIdentificar = identificarStmt.executeQuery();

            //Si se encuentra el nombre en la base de datos
            //byte templateBuffer[] = null;
            try{
            int i=0;
            while(rsIdentificar.next()){
                i++;
                byte templateBuffer[] = rsIdentificar.getBytes("huella");
                idEmpleado = rsIdentificar.getInt("id");
                horaEntrada = rsIdentificar.getString("horaEntrada");
                horaSalida = rsIdentificar.getString("horaSalida");
                //Crea una nueva plantilla a partir de la guardada en la base de datos
                DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
                //Envia la plantilla creada al objeto contendor de Template del componente de huella digital
                setTemplate(referenceTemplate);

                // Compara las caracteriticas de la huella recientemente capturda con la
                // alguna plantilla guardada en la base de datos que coincide con ese tipo
                DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());

                //compara las plantilas (actual vs bd)
                //Si encuentra correspondencia dibuja el mapa
                //e indica el nombre de la persona que coincidi√≥.
                Image rpta=null;
                if (result.isVerified()){
                    huellaIdentificada=true;
                    //respondemos a la busqueda con un sonido
//                    sonido= java.applet.Applet.newAudioClip(getClass().getResource("/sonidos/acceso.wav"));
                    sonido= java.applet.Applet.newAudioClip(getClass().getResource("/sonidos/registroCorrecto2.wav"));
                    sonido.play();

                    txtNombre.setText(rsIdentificar.getString("nombres").toUpperCase()+"  "+rsIdentificar.getString("apellidos").toUpperCase());
                    txtPuesto.setText(rsIdentificar.getString("puesto"));
                    Blob imagen = rsIdentificar.getBlob("foto");
                    txtHoraEntrada.setText(rsIdentificar.getString("horaEntrada"));
                    txtHoraSalida.setText(rsIdentificar.getString("horaSalida"));
                    txtHoraMarcada.setText(hora);
                    
                    //crea la imagen de los datos guardado de las huellas guardadas en la base de datos
                    rpta= javax.imageio.ImageIO.read(imagen.getBinaryStream());
                    Icon icon = new ImageIcon(rpta);
                    lblFoto.setIcon(icon);

                    
                    break;
                } // fin if
            } // fin while
            }
            catch(Exception ex){
                //
            }
            
            
            // pruebas unitarias
            huellaIdentificada = true;
            idEmpleado = 4;
            horaEntrada = "08:00:00";
            horaSalida = "10:00:00";
            

            //Si no encuentra alguna huella que coincida lo indica con un mensaje
            if(!huellaIdentificada){
            //JOptionPane.showMessageDialog(null, "No existe ning√∫n registro que coincida con la huella.");
//            sonido= java.applet.Applet.newAudioClip(getClass().getResource("/sonidos/error.wav"));
//            sonido.play();
            txtNombre.setText("NO EXISTE NINGUN REGISTRO QUE COINCIDA CON LA HUEYA CAPTURADA");
            lblFoto.setIcon(null);
            c.close();
            }
        }
        catch (SQLException e) {
            System.out.println("Se produjo el siguiente error: "+e.getMessage());
            e.printStackTrace();
        }
        /*finally{
        con.desconectar();
        }*/
        
        java.util.Date date = new Date();
        java.sql.Date fechaActual = new java.sql.Date(date.getTime());
        SimpleDateFormat horaActual=new SimpleDateFormat("hh:mm:ss");
                
        if(huellaIdentificada){
            try{
                //Establece los valores para la sentencia SQL
                Connection c=Conexion.getConexion();

                //Inserta el nuevo registro
                PreparedStatement insertaRegistro = c.prepareStatement("INSERT INTO tb_registros (idEmpleado,fecha,hora) values (?,?,?)");
                insertaRegistro.setInt(1, idEmpleado);
                insertaRegistro.setDate(2, fechaActual);
                insertaRegistro.setString(3, hora);
                //ejecuta el proceso
                insertaRegistro.executeUpdate();
                // **********************************************************************************************
                // ==> Verifica si existe un registro para ese dia y ese empleado
                // **********************************************************************************************
                boolean existeRegistro = false;
                boolean existeEntrada = false;
                boolean existeSalida = false;
                String horaEntradaRegistrada = "";
                String horaSalidaRegistrada = "";
                
                //propara la consulta para evualuar si existe registro para ese dia y ese empleado
                PreparedStatement identificarReporte = c.prepareStatement("SELECT id, fecha, idEmpleado, horaEntrada, horaSalida, idEstatus from tb_reportes where fecha = ? and idEmpleado = ?");
                identificarReporte.setDate(1, fechaActual);
                identificarReporte.setInt(2, idEmpleado);
                //Obtiene el resultado de la consulta
                ResultSet rsIdentificarReporte = identificarReporte.executeQuery();
                
                while (rsIdentificarReporte.next()) {
                    existeRegistro = true;
                    horaEntradaRegistrada = rsIdentificarReporte.getString("horaEntrada");
                    horaSalidaRegistrada = rsIdentificarReporte.getString("horaSalida");
                }
                
                if(existeRegistro){
                    System.out.print("existe registro");
                    // verificar si tiene horaEntrada
                    if(horaEntradaRegistrada == null){
                        // si no tiene horaEntrada, escribirla
                        //HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
                        PreparedStatement insertaEntradaEmpleado = c.prepareStatement("UPDATE tb_reportes " +
                        "SET " +
                        "horaEntrada=? " +
                        ",idEstatus= " +
                        "CASE " +
                        "   WHEN CONVERT(?, TIME) > CONVERT(?, TIME) THEN 2 " +
                        "   WHEN CONVERT(?, TIME) <= CONVERT(?, TIME) THEN 1 " +
                        "END "+
                        "WHERE idEmpleado=?");

                        insertaEntradaEmpleado.setString(1, hora);
                        insertaEntradaEmpleado.setString(2, hora);
                        insertaEntradaEmpleado.setString(3, horaEntrada);
                        insertaEntradaEmpleado.setString(4, hora);
                        insertaEntradaEmpleado.setString(5, horaEntrada);
                        insertaEntradaEmpleado.setInt(6, idEmpleado);

                        insertaEntradaEmpleado.execute();
                        //HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
                    }
                    else{
                        // si tiene horaEntradaRegistrada verificar si tiene fecha de salida
                        // si no tiene horaSalidaRegistrada, escribirla 
                        // si tiene horaSalidaRegistrada, actualizarla
                        
                        // IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
                        PreparedStatement insertaSalidaEmpleado = c.prepareStatement("UPDATE tb_reportes " +
                        "SET " +
                        "horaSalida=? " +
                        "WHERE idEmpleado=?");

                        insertaSalidaEmpleado.setString(1, hora);
                        insertaSalidaEmpleado.setInt(2, idEmpleado);

                        insertaSalidaEmpleado.execute();
                        // IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
                    } // fin if(horaEntrada == null)
                } // fin if(SiExtisteRegistro)
                else{
                    // Crear el registro del dia con la fecha de entrada del usuario
                    //crea la instruccion para insertar el dia de todos los usuarios
                    PreparedStatement insertarDia = c.prepareStatement("Insert into tb_reportes (fecha,idEmpleado,horaEntrada,horaSalida,idEstatus) " +
                    "SELECT DISTINCT  " +
                    "? as fecha, e.id as idEmpleado, null as horaEntrada,  null as horaSalida, 3 as idEstatus " +
                    "FROM tb_reportes r " +
                    "RIGHT join tb_empleados e " +
                    "	on e.id = r.idEmpleado");
                    insertarDia.setDate(1, fechaActual);
                    //Ejecuta la isntruccion
                    insertarDia.execute();
                    // Crea el registro del dia para todos los empleados
                    //HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
                    PreparedStatement insertaEntradaEmpleado = c.prepareStatement("UPDATE tb_reportes " +
                    "SET " +
                    "horaEntrada=? " +
                    ",idEstatus= " +
                    "CASE " +
                    "   WHEN CONVERT(?, TIME) > CONVERT(?, TIME) THEN 2 " + // retardo
                    "   WHEN CONVERT(?, TIME) <= CONVERT(?, TIME) THEN 1 " + // asistencia
                    "END "+
                    "WHERE idEmpleado=?");

                    insertaEntradaEmpleado.setString(1, hora);
                    insertaEntradaEmpleado.setString(2, hora);
                    insertaEntradaEmpleado.setString(3, horaEntrada);
                    insertaEntradaEmpleado.setString(4, hora);
                    insertaEntradaEmpleado.setString(5, horaEntrada);
                    insertaEntradaEmpleado.setInt(6, idEmpleado);

                    insertaEntradaEmpleado.execute();
                    //HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
                }
                // **********************************************************************************************
                // **********************************************************************************************
                c.close();
            }
            catch(Exception ex){
                System.out.println("Se produjo el siguiente error: "+ex.getMessage());
            ex.printStackTrace();
            }
            
            
        } // Fin huellaIdentificada
        // borrar datos despues de 3 segundos
            
    } // fin identificarHuella()
    
    
    public DPFPTemplate getTemplate() {
        return template;
    }
    
    @Override
    public void run() {
        Thread ct = Thread.currentThread();
        while(ct == h1) {
            calcula();
            lblHora.setText(hora + ":" + minutos + ":" + segundos + " "+ampm);
            try {
                Thread.sleep(1000);
            }catch(InterruptedException e) {}
        }
    } // fin run
    
    public void calcula () {
        Calendar calendario = new GregorianCalendar();
        Date fechaHoraActual = new Date();

        calendario.setTime(fechaHoraActual);
        ampm = calendario.get(Calendar.AM_PM)==Calendar.AM?"AM":"PM";
        if(ampm.equals("PM")){
        int h = calendario.get(Calendar.HOUR_OF_DAY)-12;
        hora = h>9?""+h:"0"+h;
        }else{
        hora = calendario.get(Calendar.HOUR_OF_DAY)>9?""+calendario.get(Calendar.HOUR_OF_DAY):"0"+calendario.get(Calendar.HOUR_OF_DAY); }
        minutos = calendario.get(Calendar.MINUTE)>9?""+calendario.get(Calendar.MINUTE):"0"+calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND)>9?""+calendario.get(Calendar.SECOND):"0"+calendario.get(Calendar.SECOND);
    }
    
    
} // fin Class
